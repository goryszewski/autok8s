- name: ACME test
  hosts: all
  gather_facts: false
  vars:
    priv: "/srv/test.key"
    csr: "/srv/test.csr"
    cert: "/srv/test.crt"
  tasks:
    - name: 01 - clean
      shell: "rm -rf /srv/*"
      tags: ['SKIP']

    - name: 02 - Generate an OpenSSL private key with the default values (4096 bits, RSA)
      community.crypto.openssl_privatekey:
        path: "{{ priv }}"
      tags: ['account']

    - name: 03 - Make sure account exists and has given contacts. We agree to TOS.
      community.crypto.acme_account:
        account_key_src: "{{ priv }}"
        state: present
        terms_agreed: true
        acme_version: 2
        acme_directory: http://10.17.3.1:8050/acme/directory
        contact:
        - mailto:me@example.com
        - mailto:myself@example.org
      register: acme_account_response
      tags: ['account']

    - name: 04 - Debug acme_account response
      debug:
        msg: "{{ acme_account_response }}"
      tags: ['account']

    - name: 05 - Make sure account has given email address. Do not create account if it does not exist
      community.crypto.acme_account:
        account_key_src: "{{ priv }}"
        terms_agreed: true
        state: present
        allow_creation: false
        acme_version: 2
        acme_directory: http://10.17.3.1:8050/acme/directory
        contact:
        - mailto:me1@example.com
      register: acme_account_response
      tags: ['account']

    - name: 06 - Debug acme_account response
      debug:
        msg: "{{ acme_account_response }}"
      tags: ['account']

    - name: 07 - Generate an OpenSSL private key with the default values (4096 bits, RSA) 2
      community.crypto.openssl_privatekey:
        path: "/srv/test2.key"

    - name: 08 - Make sure account has given email address. Do not create account if it does not exist
      community.crypto.acme_account:
        account_key_src: "/srv/test2.key"
        state: present
        allow_creation: false
        acme_version: 2
        acme_directory: http://10.17.3.1:8050/acme/directory
        contact:
        - mailto:me1@example1.com
      register: acme_account_response
      ignore_errors: true

    - name: 09 - Debug acme_account response
      debug:
        msg: "{{ acme_account_response }}"

    - name: 10 - Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ csr }}"
        privatekey_path: "{{ priv }}"
        common_name: autok8s.xyz
        extended_key_usage:
          - clientAuth
        subject_alt_name:
          - DNS:autok8s.xyz
          - DNS:www.autok8s.xyz
          - IP:127.0.0.1

    - name: 11 - Create a challenge for sample.com using a account key file.
      community.crypto.acme_certificate:
        account_key_src: "{{ priv }}"
        csr: "{{ csr }}"
        dest: "{{ cert }}"
        acme_directory: http://10.17.3.1:8050/acme/directory
        acme_version: 2
        account_email: test@autok8s.xyz
        terms_agreed: true
      register: acme_response

    - name: 12 - Debug ACME response
      debug:
        msg: "{{ acme_response }}"

    - name: 13 - Let the challenge(s) be validated and retrieve the cert and intermediate certificate
      community.crypto.acme_certificate:
        account_key_src: "{{ priv }}"
        csr: "{{ csr }}"
        dest: "{{ cert }}"
        data: "{{ acme_response }}"
        fullchain: /srv/sample.com-fullchain.crt
        chain: /srv/sample.com-intermediate.crt
        acme_directory: http://10.17.3.1:8050/acme/directory
        account_email: test@autok8s.xyz
        acme_version: 2
        terms_agreed: true
