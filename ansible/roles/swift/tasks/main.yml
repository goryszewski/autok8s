---
# tasks file for swift

- name: Ensure group "swift" exists
  ansible.builtin.group:
    name: swift
    state: present

- name: Add the user 'swift' with a specific uid and a primary group of 'swift'
  ansible.builtin.user:
    name: swift
    group: swift
    shell: /bin/bash

# Installing dependencies
- name: Install packages
  ansible.builtin.apt:
    update_cache: true
    allow_change_held_packages: true
    pkg: def_soft_Debian

# Configuring storage

- name: Create a new primary partition for LVM
  community.general.parted:
    device: /dev/vdb
    number: 1
    flags: [xfs]
    state: present

- name: Create a xfs filesystem on /dev/vdb1
  community.general.filesystem:
    fstype: xfs
    dev: /dev/vdb1

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /mnt/vdb1
    state: directory
    mode: '0755'

- name: Mount up device  /dev/vdb1
  ansible.posix.mount:
    path: /mnt/vdb1
    src:  /dev/vdb1
    fstype: xfs
    state: present

# Common Post-Device Setup

- name: Create a directory if it does not exist /mnt/vdb1/1-4
  ansible.builtin.file:
    path: /mnt/vdb1/{{ item }}
    state: directory
    mode: '0755'
    owner: swift
    group: swift
  loop: [1,2,3,4]

- name: Create a directory if it does not exist /var/cache/swift1-4
  ansible.builtin.file:
    path: /var/cache/swift{{ item }}
    state: directory
    mode: '0755'
    owner: swift
    group: swift
  loop: [1,2,3,4]

- name: Create a symbolic link/ mnt/vdb1/1-4
  ansible.builtin.file:
    src: /mnt/vdb1/{{ item }}
    dest: /srv/{{ item }}
    owner: swift
    group: swift
    state: link
  loop: [1,2,3,4]

#Getting the code



#Setting up rsync

#Starting memcached

#Optional: Setting up rsyslog for individual logging

#Configuring each node

#Setting up scripts for running Swift

#Configure environment variables for Swift

#Constructing initial rings
